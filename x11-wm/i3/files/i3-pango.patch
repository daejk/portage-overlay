diff -Naur a/common.mk b/common.mk
--- a/common.mk	2012-04-25 23:21:32.000000000 +0200
+++ b/common.mk	2012-05-17 21:06:32.710431453 +0200
@@ -89,6 +89,15 @@
 LIBS += $(call ldflags_for_lib, libpcre,pcre)
 LIBS += $(call ldflags_for_lib, libstartup-notification-1.0,startup-notification-1)
 
+# Enable Pango support if available
+ifeq ($(shell pkg-config --exists cairo pangocairo && echo 1),1)
+CPPFLAGS += -DPANGO_SUPPORT=1
+CFLAGS += $(shell pkg-config --cflags cairo pangocairo)
+LIBS += $(shell pkg-config --libs cairo pangocairo)
+else
+CPPFLAGS += -DPANGO_SUPPORT=0
+endif
+
 # Please test if -Wl,--as-needed works on your platform and send me a patch.
 # it is known not to work on Darwin (Mac OS X)
 ifneq (,$(filter Linux GNU GNU/%, $(UNAME)))
diff -Naur a/i3bar/src/xcb.c b/i3bar/src/xcb.c
--- a/i3bar/src/xcb.c	2012-04-25 23:21:25.000000000 +0200
+++ b/i3bar/src/xcb.c	2012-05-17 21:06:32.720431205 +0200
@@ -48,10 +48,11 @@
 xcb_connection_t *xcb_connection;
 int              screen;
 xcb_screen_t     *xcb_screen;
-xcb_window_t     xcb_root;
+xcb_window_t     root;
 
 /* This is needed for integration with libi3 */
 xcb_connection_t *conn;
+xcb_visualtype_t *root_visual_type;
 
 /* The font we'll use */
 static i3Font font;
@@ -827,7 +828,8 @@
     #include "xcb_atoms.def"
 
     xcb_screen = xcb_aux_get_screen(xcb_connection, screen);
-    xcb_root = xcb_screen->root;
+    root_visual_type = get_visualtype(xcb_screen);
+    root = xcb_screen->root;
 
     /* We draw the statusline to a seperate pixmap, because it looks the same on all bars and
      * this way, we can choose to crop it */
@@ -837,14 +839,14 @@
     statusline_clear = xcb_generate_id(xcb_connection);
     xcb_void_cookie_t clear_ctx_cookie = xcb_create_gc_checked(xcb_connection,
                                                                statusline_clear,
-                                                               xcb_root,
+                                                               root,
                                                                mask,
                                                                vals);
 
     statusline_ctx = xcb_generate_id(xcb_connection);
     xcb_void_cookie_t sl_ctx_cookie = xcb_create_gc_checked(xcb_connection,
                                                             statusline_ctx,
-                                                            xcb_root,
+                                                            root,
                                                             0,
                                                             NULL);
 
@@ -852,7 +854,7 @@
     xcb_void_cookie_t sl_pm_cookie = xcb_create_pixmap_checked(xcb_connection,
                                                                xcb_screen->root_depth,
                                                                statusline_pm,
-                                                               xcb_root,
+                                                               root,
                                                                xcb_screen->width_in_pixels,
                                                                xcb_screen->height_in_pixels);
 
@@ -876,7 +878,7 @@
     xcb_get_property_cookie_t path_cookie;
     path_cookie = xcb_get_property_unchecked(xcb_connection,
                                    0,
-                                   xcb_root,
+                                   root,
                                    atoms[I3_SOCKET_PATH],
                                    XCB_GET_PROPERTY_TYPE_ANY,
                                    0, PATH_MAX);
@@ -984,7 +986,7 @@
     xcb_create_window(xcb_connection,
                       xcb_screen->root_depth,
                       selwin,
-                      xcb_root,
+                      root,
                       -1, -1,
                       1, 1,
                       1,
@@ -1037,7 +1039,7 @@
     void *event = scalloc(32);
     xcb_client_message_event_t *ev = event;
     ev->response_type = XCB_CLIENT_MESSAGE;
-    ev->window = xcb_root;
+    ev->window = root;
     ev->type = atoms[MANAGER];
     ev->format = 32;
     ev->data.data32[0] = XCB_CURRENT_TIME;
@@ -1045,7 +1047,7 @@
     ev->data.data32[2] = selwin;
     xcb_send_event(xcb_connection,
                    0,
-                   xcb_root,
+                   root,
                    XCB_EVENT_MASK_STRUCTURE_NOTIFY,
                    (char*)ev);
     free(event);
@@ -1116,7 +1118,7 @@
         xcb_unmap_window(xcb_connection, trayclient->win);
         xcb_reparent_window(xcb_connection,
                             trayclient->win,
-                            xcb_root,
+                            root,
                             0,
                             0);
 
@@ -1155,7 +1157,7 @@
     xcb_void_cookie_t sl_pm_cookie = xcb_create_pixmap_checked(xcb_connection,
                                                                xcb_screen->root_depth,
                                                                statusline_pm,
-                                                               xcb_root,
+                                                               root,
                                                                MAX(xcb_screen->width_in_pixels, statusline_width),
                                                                xcb_screen->height_in_pixels);
 
@@ -1165,7 +1167,7 @@
     statusline_clear = xcb_generate_id(xcb_connection);
     xcb_void_cookie_t clear_ctx_cookie = xcb_create_gc_checked(xcb_connection,
                                                                statusline_clear,
-                                                               xcb_root,
+                                                               root,
                                                                mask,
                                                                vals);
 
@@ -1175,7 +1177,7 @@
     xcb_free_gc(xcb_connection, statusline_ctx);
     xcb_void_cookie_t sl_ctx_cookie = xcb_create_gc_checked(xcb_connection,
                                                             statusline_ctx,
-                                                            xcb_root,
+                                                            root,
                                                             mask,
                                                             vals);
 
@@ -1229,7 +1231,7 @@
             xcb_void_cookie_t win_cookie = xcb_create_window_checked(xcb_connection,
                                                                      xcb_screen->root_depth,
                                                                      walk->bar,
-                                                                     xcb_root,
+                                                                     root,
                                                                      walk->rect.x, walk->rect.y + walk->rect.h - font.height - 6,
                                                                      walk->rect.w, font.height + 6,
                                                                      1,
@@ -1511,7 +1513,7 @@
                                     &rect);
             set_font_colors(outputs_walk->bargc, fg_color, bg_color);
             draw_text((char*)ws_walk->ucs2_name, ws_walk->name_glyphs, true,
-                    outputs_walk->buffer, outputs_walk->bargc, i + 5, 2, ws_walk->name_width);
+                    outputs_walk->buffer, outputs_walk->bargc, i + 5, 3, ws_walk->name_width);
             i += 10 + ws_walk->name_width + 1;
         }
 
diff -Naur a/i3-config-wizard/main.c b/i3-config-wizard/main.c
--- a/i3-config-wizard/main.c	2012-04-25 23:21:25.000000000 +0200
+++ b/i3-config-wizard/main.c	2012-05-17 21:06:32.710431453 +0200
@@ -77,6 +77,7 @@
 static xcb_pixmap_t pixmap;
 static xcb_gcontext_t pixmap_gc;
 static xcb_key_symbols_t *symbols;
+xcb_visualtype_t *root_visual_type;
 xcb_window_t root;
 Display *dpy;
 
@@ -457,6 +458,7 @@
     #undef xmacro
 
     xcb_screen_t *root_screen = xcb_aux_get_screen(conn, screens);
+    root_visual_type = get_visualtype(root_screen);
     root = root_screen->root;
 
     if (!(modmap_reply = xcb_get_modifier_mapping_reply(conn, modmap_cookie, NULL)))
diff -Naur a/i3-input/main.c b/i3-input/main.c
--- a/i3-input/main.c	2012-04-25 23:21:32.000000000 +0200
+++ b/i3-input/main.c	2012-05-17 21:06:32.710431453 +0200
@@ -52,6 +52,7 @@
 static char *prompt;
 static size_t prompt_len;
 static int limit;
+xcb_visualtype_t *root_visual_type;
 xcb_window_t root;
 xcb_connection_t *conn;
 
@@ -358,6 +359,7 @@
         die("Cannot open display\n");
 
     xcb_screen_t *root_screen = xcb_aux_get_screen(conn, screens);
+    root_visual_type = get_visualtype(root_screen);
     root = root_screen->root;
 
     symbols = xcb_key_symbols_alloc(conn);
diff -Naur a/i3-nagbar/main.c b/i3-nagbar/main.c
--- a/i3-nagbar/main.c	2012-04-25 23:21:25.000000000 +0200
+++ b/i3-nagbar/main.c	2012-05-17 21:06:32.710431453 +0200
@@ -52,6 +52,7 @@
 static uint32_t color_border_bottom;     /* color of the bottom border */
 static uint32_t color_text;              /* color of the text */
 
+xcb_visualtype_t *root_visual_type;
 xcb_window_t root;
 xcb_connection_t *conn;
 
@@ -281,6 +282,7 @@
     #undef xmacro
 
     xcb_screen_t *root_screen = xcb_aux_get_screen(conn, screens);
+    root_visual_type = get_visualtype(root_screen);
     root = root_screen->root;
 
     if (bar_type == TYPE_ERROR) {
diff -Naur a/include/libi3.h b/include/libi3.h
--- a/include/libi3.h	2012-04-25 23:21:25.000000000 +0200
+++ b/include/libi3.h	2012-05-17 21:06:32.710431453 +0200
@@ -18,6 +18,10 @@
 #include <xcb/xproto.h>
 #include <xcb/xcb_keysyms.h>
 
+#if PANGO_SUPPORT
+#include <pango/pango.h>
+#endif
+
 typedef struct Font i3Font;
 
 /**
@@ -27,17 +31,33 @@
  *
  */
 struct Font {
-    /** The xcb-id for the font */
-    xcb_font_t id;
-
-    /** Font information gathered from the server */
-    xcb_query_font_reply_t *info;
-
-    /** Font table for this font (may be NULL) */
-    xcb_charinfo_t *table;
+    /** The type of font */
+    enum {
+        FONT_TYPE_NONE = 0,
+        FONT_TYPE_XCB,
+        FONT_TYPE_PANGO
+    } type;
 
     /** The height of the font, built from font_ascent + font_descent */
     int height;
+
+    union {
+        struct {
+            /** The xcb-id for the font */
+            xcb_font_t id;
+
+            /** Font information gathered from the server */
+            xcb_query_font_reply_t *info;
+
+            /** Font table for this font (may be NULL) */
+            xcb_charinfo_t *table;
+        } xcb;
+
+#if PANGO_SUPPORT
+        /** The pango font description */
+        PangoFontDescription *pango_desc;
+#endif
+    } specific;
 };
 
 /* Since this file also gets included by utilities which don’t use the i3 log
@@ -242,4 +262,10 @@
  */
 int predict_text_width(char *text, size_t text_len, bool is_ucs2);
 
+/*
+ * Returns the visual type associated with the given screen.
+ *
+ */
+xcb_visualtype_t *get_visualtype(xcb_screen_t *s);
+
 #endif
diff -Naur a/libi3/font.c b/libi3/font.c
--- a/libi3/font.c	2012-04-25 23:21:25.000000000 +0200
+++ b/libi3/font.c	2012-05-17 21:06:32.717097954 +0200
@@ -12,11 +12,130 @@
 #include <stdbool.h>
 #include <err.h>
 
+#if PANGO_SUPPORT
+#include <cairo/cairo-xcb.h>
+#include <pango/pangocairo.h>
+#endif
+
 #include "libi3.h"
 
 extern xcb_connection_t *conn;
+extern xcb_visualtype_t *root_visual_type;
+extern xcb_window_t root;
+
 static const i3Font *savedFont = NULL;
 
+#if PANGO_SUPPORT
+static double pango_font_red;
+static double pango_font_green;
+static double pango_font_blue;
+
+/*
+ * Loads a Pango font description into an i3Font structure. Returns true
+ * on success, false otherwise.
+ *
+ */
+static bool load_pango_font(i3Font *font, const char *desc) {
+    /* Load the font description */
+    font->specific.pango_desc = pango_font_description_from_string(desc);
+    if (!font->specific.pango_desc)
+        return false;
+
+    /* Create a dummy Pango layout */
+    cairo_surface_t *surface = cairo_xcb_surface_create(conn, root, root_visual_type, 100, 100);
+    cairo_t *cr = cairo_create(surface);
+    PangoLayout *layout = pango_cairo_create_layout(cr);
+    pango_layout_set_font_description(layout, font->specific.pango_desc);
+
+    /* Get the font height */
+    gint height;
+    pango_layout_get_pixel_size(layout, NULL, &height);
+    font->height = height;
+
+    /* Free resources */
+    g_object_unref(layout);
+    cairo_destroy(cr);
+    cairo_surface_destroy(surface);
+
+    /* Set the font type and return successfully */
+    font->type = FONT_TYPE_PANGO;
+    return true;
+}
+
+/*
+ * Draws text using Pango rendering.
+ *
+ */
+void draw_text_pango(char *text, size_t text_len, bool is_ucs2,
+        xcb_drawable_t drawable, int x, int y, int max_width) {
+    /* Create the Pango layout */
+    cairo_surface_t *surface = cairo_xcb_surface_create(conn, drawable,
+            root_visual_type, x + max_width, y + savedFont->height);
+    cairo_t *cr = cairo_create(surface);
+    PangoLayout *layout = pango_cairo_create_layout(cr);
+    pango_layout_set_font_description(layout, savedFont->specific.pango_desc);
+    pango_layout_set_width(layout, max_width * PANGO_SCALE);
+    pango_layout_set_wrap(layout, PANGO_WRAP_CHAR);
+    pango_layout_set_ellipsize(layout, PANGO_ELLIPSIZE_END);
+
+    /* If the text is UCS-2, convert it to UTF-8 */
+    if (is_ucs2) {
+        text = convert_ucs2_to_utf8((xcb_char2b_t*)text, text_len);
+        if (!text)
+            return;
+        text_len = strlen(text);
+    }
+
+    /* Do the drawing */
+    cairo_set_source_rgb(cr, pango_font_red, pango_font_green, pango_font_blue);
+    cairo_move_to(cr, x, y);
+    pango_layout_set_text(layout, text, text_len);
+    pango_cairo_update_layout(cr, layout);
+    pango_cairo_show_layout(cr, layout);
+
+    /* Free resources */
+    g_object_unref(layout);
+    cairo_destroy(cr);
+    cairo_surface_destroy(surface);
+    if (is_ucs2)
+        free(text);
+}
+
+/*
+ * Calculate the text width using Pango rendering.
+ *
+ */
+int predict_text_width_pango(char *text, size_t text_len, bool is_ucs2) {
+    /* If the text is UCS-2, convert it to UTF-8 */
+    if (is_ucs2) {
+        text = convert_ucs2_to_utf8((xcb_char2b_t*)text, text_len);
+        if (!text)
+            return 10 * text_len;
+    }
+
+    /* Create a dummy Pango layout */
+    cairo_surface_t *surface = cairo_xcb_surface_create(conn, root, root_visual_type, 100, 100);
+    cairo_t *cr = cairo_create(surface);
+    PangoLayout *layout = pango_cairo_create_layout(cr);
+
+    /* Get the font height */
+    gint width;
+    pango_layout_set_font_description(layout, savedFont->specific.pango_desc);
+    pango_layout_set_text(layout, text, text_len);
+    pango_cairo_update_layout(cr, layout);
+    pango_layout_get_pixel_size(layout, &width, NULL);
+
+    /* Free resources */
+    g_object_unref(layout);
+    cairo_destroy(cr);
+    cairo_surface_destroy(surface);
+    if (is_ucs2)
+        free(text);
+
+    return width;
+}
+#endif
+
 /*
  * Loads a font for usage, also getting its metrics. If fallback is true,
  * the fonts 'fixed' or '-misc-*' will be loaded instead of exiting.
@@ -24,12 +143,22 @@
  */
 i3Font load_font(const char *pattern, const bool fallback) {
     i3Font font;
+    font.type = FONT_TYPE_NONE;
+
+#if PANGO_SUPPORT
+    /* Try to load a pango font if specified */
+    if (strlen(pattern) > 6 && !strncmp(pattern, "xft:", 4)) {
+        pattern += 4;
+        if (load_pango_font(&font, pattern))
+            return font;
+    }
+#endif
 
     /* Send all our requests first */
-    font.id = xcb_generate_id(conn);
-    xcb_void_cookie_t font_cookie = xcb_open_font_checked(conn, font.id,
+    font.specific.xcb.id = xcb_generate_id(conn);
+    xcb_void_cookie_t font_cookie = xcb_open_font_checked(conn, font.specific.xcb.id,
             strlen(pattern), pattern);
-    xcb_query_font_cookie_t info_cookie = xcb_query_font(conn, font.id);
+    xcb_query_font_cookie_t info_cookie = xcb_query_font(conn, font.specific.xcb.id);
 
     /* Check for errors. If errors, fall back to default font. */
     xcb_generic_error_t *error;
@@ -40,8 +169,9 @@
         ELOG("Could not open font %s (X error %d). Trying fallback to 'fixed'.\n",
              pattern, error->error_code);
         pattern = "fixed";
-        font_cookie = xcb_open_font_checked(conn, font.id, strlen(pattern), pattern);
-        info_cookie = xcb_query_font(conn, font.id);
+        font_cookie = xcb_open_font_checked(conn, font.specific.xcb.id,
+                strlen(pattern), pattern);
+        info_cookie = xcb_query_font(conn, font.specific.xcb.id);
 
         /* Check if we managed to open 'fixed' */
         error = xcb_request_check(conn, font_cookie);
@@ -50,8 +180,9 @@
         if (error != NULL) {
             ELOG("Could not open fallback font 'fixed', trying with '-misc-*'.\n");
             pattern = "-misc-*";
-            font_cookie = xcb_open_font_checked(conn, font.id, strlen(pattern), pattern);
-            info_cookie = xcb_query_font(conn, font.id);
+            font_cookie = xcb_open_font_checked(conn, font.specific.xcb.id,
+                    strlen(pattern), pattern);
+            info_cookie = xcb_query_font(conn, font.specific.xcb.id);
 
             if ((error = xcb_request_check(conn, font_cookie)) != NULL)
                 errx(EXIT_FAILURE, "Could open neither requested font nor fallbacks "
@@ -60,18 +191,20 @@
     }
 
     /* Get information (height/name) for this font */
-    if (!(font.info = xcb_query_font_reply(conn, info_cookie, NULL)))
+    if (!(font.specific.xcb.info = xcb_query_font_reply(conn, info_cookie, NULL)))
         errx(EXIT_FAILURE, "Could not load font \"%s\"", pattern);
 
     /* Get the font table, if possible */
-    if (xcb_query_font_char_infos_length(font.info) == 0)
-        font.table = NULL;
+    if (xcb_query_font_char_infos_length(font.specific.xcb.info) == 0)
+        font.specific.xcb.table = NULL;
     else
-        font.table = xcb_query_font_char_infos(font.info);
+        font.specific.xcb.table = xcb_query_font_char_infos(font.specific.xcb.info);
 
     /* Calculate the font height */
-    font.height = font.info->font_ascent + font.info->font_descent;
+    font.height = font.specific.xcb.info->font_ascent + font.specific.xcb.info->font_descent;
 
+    /* Set the font type and return successfully */
+    font.type = FONT_TYPE_XCB;
     return font;
 }
 
@@ -88,10 +221,27 @@
  *
  */
 void free_font(void) {
-    /* Close the font and free the info */
-    xcb_close_font(conn, savedFont->id);
-    if (savedFont->info)
-        free(savedFont->info);
+    switch (savedFont->type) {
+        case FONT_TYPE_NONE:
+            /* Nothing to do */
+            break;
+        case FONT_TYPE_XCB: {
+            /* Close the font and free the info */
+            xcb_close_font(conn, savedFont->specific.xcb.id);
+            if (savedFont->specific.xcb.info)
+                free(savedFont->specific.xcb.info);
+            break;
+        }
+#if PANGO_SUPPORT
+        case FONT_TYPE_PANGO:
+            /* Free the font description */
+            pango_font_description_free(savedFont->specific.pango_desc);
+            break;
+#endif
+        default:
+            assert(false);
+            break;
+    }
 }
 
 /*
@@ -100,9 +250,30 @@
  */
 void set_font_colors(xcb_gcontext_t gc, uint32_t foreground, uint32_t background) {
     assert(savedFont != NULL);
-    uint32_t mask = XCB_GC_FOREGROUND | XCB_GC_BACKGROUND | XCB_GC_FONT;
-    uint32_t values[] = { foreground, background, savedFont->id };
-    xcb_change_gc(conn, gc, mask, values);
+
+    switch (savedFont->type) {
+        case FONT_TYPE_NONE:
+            /* Nothing to do */
+            break;
+        case FONT_TYPE_XCB: {
+            /* Change the font and colors in the GC */
+            uint32_t mask = XCB_GC_FOREGROUND | XCB_GC_BACKGROUND | XCB_GC_FONT;
+            uint32_t values[] = { foreground, background, savedFont->specific.xcb.id };
+            xcb_change_gc(conn, gc, mask, values);
+            break;
+        }
+#if PANGO_SUPPORT
+        case FONT_TYPE_PANGO:
+            /* Save the foreground font */
+            pango_font_red = ((foreground >> 16) & 0xff) / 255.0;
+            pango_font_green = ((foreground >> 8) & 0xff) / 255.0;
+            pango_font_blue = (foreground & 0xff) / 255.0;
+            break;
+#endif
+        default:
+            assert(false);
+            break;
+    }
 }
 
 /*
@@ -121,8 +292,25 @@
     assert(savedFont != NULL);
     assert(text_len != 0);
 
+    switch (savedFont->type) {
+        case FONT_TYPE_NONE:
+            /* Nothing to do */
+            return;
+        case FONT_TYPE_XCB:
+            /* Continue below */
+            break;
+#if PANGO_SUPPORT
+        case FONT_TYPE_PANGO:
+            /* Render the text using Pango */
+            draw_text_pango(text, text_len, is_ucs2, drawable, x, y, max_width);
+            return;
+#endif
+        default:
+            assert(false);
+    }
+
     /* X11 coordinates for fonts start at the baseline */
-    int pos_y = y + savedFont->info->font_ascent;
+    int pos_y = y + savedFont->specific.xcb.info->font_ascent;
 
     /* As an optimization, check if we can bypass conversion */
     if (!is_ucs2 && text_len <= 255) {
@@ -173,7 +361,7 @@
     /* Query the text width */
     xcb_generic_error_t *error;
     xcb_query_text_extents_cookie_t cookie = xcb_query_text_extents(conn,
-            savedFont->id, text_len, (xcb_char2b_t*)text);
+            savedFont->specific.xcb.id, text_len, (xcb_char2b_t*)text);
     xcb_query_text_extents_reply_t *reply = xcb_query_text_extents_reply(conn,
             cookie, &error);
     if (reply == NULL) {
@@ -181,7 +369,7 @@
          * a crash. Plus, the user will see the error in his log. */
         fprintf(stderr, "Could not get text extents (X error code %d)\n",
                 error->error_code);
-        return savedFont->info->max_bounds.character_width * text_len;
+        return savedFont->specific.xcb.info->max_bounds.character_width * text_len;
     }
 
     int width = reply->overall_width;
@@ -195,6 +383,25 @@
  *
  */
 int predict_text_width(char *text, size_t text_len, bool is_ucs2) {
+    assert(savedFont != NULL);
+
+    switch (savedFont->type) {
+        case FONT_TYPE_NONE:
+            /* Nothing to do */
+            return 0;
+        case FONT_TYPE_XCB:
+            /* Continue below */
+            break;
+#if PANGO_SUPPORT
+        case FONT_TYPE_PANGO:
+            /* Calculate extents using Pango */
+            return predict_text_width_pango(text, text_len, is_ucs2);
+#endif
+        default:
+            assert(false);
+            return 0;
+    }
+
     /* Convert the text into UTF-16 so we can do basic pointer math */
     xcb_char2b_t *input;
     if (is_ucs2)
@@ -203,13 +410,13 @@
         input = convert_utf8_to_ucs2(text, &text_len);
 
     int width;
-    if (savedFont->table == NULL) {
+    if (savedFont->specific.xcb.table == NULL) {
         /* If we don't have a font table, fall back to querying the server */
         width = xcb_query_text_width(input, text_len);
     } else {
         /* Save some pointers for convenience */
-        xcb_query_font_reply_t *font_info = savedFont->info;
-        xcb_charinfo_t *font_table = savedFont->table;
+        xcb_query_font_reply_t *font_info = savedFont->specific.xcb.info;
+        xcb_charinfo_t *font_table = savedFont->specific.xcb.table;
 
         /* Calculate the width using the font table */
         width = 0;
diff -Naur a/libi3/get_visualtype.c b/libi3/get_visualtype.c
--- a/libi3/get_visualtype.c	1970-01-01 01:00:00.000000000 +0100
+++ b/libi3/get_visualtype.c	2012-05-17 21:07:25.572388341 +0200
@@ -0,0 +1,24 @@
+/*
+ * vim:ts=4:sw=4:expandtab
+ *
+ * i3 - an improved dynamic tiling window manager
+ * © 2009-2011 Michael Stapelberg and contributors (see also: LICENSE)
+ *
+ */
+#include "libi3.h"
+
+/*
+ * Returns the visual type associated with the given screen.
+ *
+ */
+xcb_visualtype_t *get_visualtype(xcb_screen_t *s) {
+    xcb_depth_iterator_t depth_iter = xcb_screen_allowed_depths_iterator(s);
+    for (; depth_iter.rem;xcb_depth_next(&depth_iter)) {
+        xcb_visualtype_iterator_t visual_iter = xcb_depth_visuals_iterator(depth_iter.data);
+        for (; visual_iter.rem;xcb_visualtype_next(&visual_iter)) {
+            if (s->root_visual == visual_iter.data->visual_id)
+                return visual_iter.data;
+        }
+    }
+    return NULL;
+}
diff -Naur a/src/config.c b/src/config.c
--- a/src/config.c	2012-04-25 23:21:25.000000000 +0200
+++ b/src/config.c	2012-05-17 21:06:32.713764703 +0200
@@ -392,7 +392,7 @@
         grab_all_keys(conn, false);
     }
 
-    if (config.font.id == 0) {
+    if (config.font.type == FONT_TYPE_NONE) {
         ELOG("You did not specify required configuration option \"font\"\n");
         config.font = load_font("fixed", true);
         set_font(&config.font);
diff -Naur a/src/main.c b/src/main.c
--- a/src/main.c	2012-04-25 23:21:25.000000000 +0200
+++ b/src/main.c	2012-05-17 21:06:32.713764703 +0200
@@ -51,6 +51,7 @@
  * notification). */
 xcb_timestamp_t last_timestamp = XCB_CURRENT_TIME;
 
+xcb_visualtype_t *root_visual_type;
 xcb_screen_t *root_screen;
 xcb_window_t root;
 
@@ -517,6 +518,7 @@
      * usually is TrueColor (24 bit depth) and the corresponding visual.
      * However, we also check if a 32 bit depth and visual are available (for
      * transparency) and use it if so. */
+    root_visual_type = get_visualtype(root_screen);
     root_depth = root_screen->root_depth;
     visual_id = root_screen->root_visual;
     colormap = root_screen->default_colormap;
diff -Naur a/src/xcb.c b/src/xcb.c
--- a/src/xcb.c	2012-04-25 23:21:25.000000000 +0200
+++ b/src/xcb.c	2012-05-17 21:06:32.713764703 +0200
@@ -48,8 +48,9 @@
         xcb_cursor_t cursor_id = xcb_generate_id(conn);
         i3Font cursor_font = load_font("cursor", false);
         int xcb_cursor = xcursor_get_xcb_cursor(cursor);
-        xcb_create_glyph_cursor(conn, cursor_id, cursor_font.id, cursor_font.id,
-                xcb_cursor, xcb_cursor + 1, 0, 0, 0, 65535, 65535, 65535);
+        xcb_create_glyph_cursor(conn, cursor_id, cursor_font.specific.xcb.id,
+                cursor_font.specific.xcb.id, xcb_cursor, xcb_cursor + 1, 0, 0, 0,
+                65535, 65535, 65535);
         xcb_change_window_attributes(conn, result, XCB_CW_CURSOR, &cursor_id);
         xcb_free_cursor(conn, cursor_id);
     }
@@ -193,8 +194,9 @@
     xcb_cursor_t cursor_id = xcb_generate_id(conn);
     i3Font cursor_font = load_font("cursor", false);
     int xcb_cursor = xcursor_get_xcb_cursor(cursor);
-    xcb_create_glyph_cursor(conn, cursor_id, cursor_font.id, cursor_font.id,
-            xcb_cursor, xcb_cursor + 1, 0, 0, 0, 65535, 65535, 65535);
+    xcb_create_glyph_cursor(conn, cursor_id, cursor_font.specific.xcb.id,
+            cursor_font.specific.xcb.id, xcb_cursor, xcb_cursor + 1, 0, 0, 0,
+            65535, 65535, 65535);
     xcb_change_window_attributes(conn, root, XCB_CW_CURSOR, &cursor_id);
     xcb_free_cursor(conn, cursor_id);
     xcb_flush(conn);
